// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// filter_sort_matrix
NumericMatrix filter_sort_matrix(NumericMatrix network_matrix, Nullable<CharacterVector> regulators, Nullable<CharacterVector> targets);
RcppExport SEXP _inferCSN_filter_sort_matrix(SEXP network_matrixSEXP, SEXP regulatorsSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type network_matrix(network_matrixSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type regulators(regulatorsSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_sort_matrix(network_matrix, regulators, targets));
    return rcpp_result_gen;
END_RCPP
}
// prepare_calculate_metrics
DataFrame prepare_calculate_metrics(DataFrame network_table, DataFrame ground_truth);
RcppExport SEXP _inferCSN_prepare_calculate_metrics(SEXP network_tableSEXP, SEXP ground_truthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type network_table(network_tableSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type ground_truth(ground_truthSEXP);
    rcpp_result_gen = Rcpp::wrap(prepare_calculate_metrics(network_table, ground_truth));
    return rcpp_result_gen;
END_RCPP
}
// network_format
DataFrame network_format(DataFrame network_table, Nullable<CharacterVector> regulators, Nullable<CharacterVector> targets, bool abs_weight);
RcppExport SEXP _inferCSN_network_format(SEXP network_tableSEXP, SEXP regulatorsSEXP, SEXP targetsSEXP, SEXP abs_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type network_table(network_tableSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type regulators(regulatorsSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< bool >::type abs_weight(abs_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(network_format(network_table, regulators, targets, abs_weight));
    return rcpp_result_gen;
END_RCPP
}
// weight_sift
Rcpp::DataFrame weight_sift(Rcpp::DataFrame table);
RcppExport SEXP _inferCSN_weight_sift(SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(weight_sift(table));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_inferCSN_filter_sort_matrix", (DL_FUNC) &_inferCSN_filter_sort_matrix, 3},
    {"_inferCSN_prepare_calculate_metrics", (DL_FUNC) &_inferCSN_prepare_calculate_metrics, 2},
    {"_inferCSN_network_format", (DL_FUNC) &_inferCSN_network_format, 4},
    {"_inferCSN_weight_sift", (DL_FUNC) &_inferCSN_weight_sift, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_inferCSN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
